apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
// apply plugin: 'kotlin-kapt'


android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion

    defaultConfig {
        applicationId "com.tc.kefan"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        multiDexEnabled true
        // flavorDimensions "versionCode"

        ndk {
            // 设置支持的SO库架构
            abiFilters 'armeabi' //, 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
        }

    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
        disable 'CheckResult'
    }

    signingConfigs {
        release {
            storeFile file(rootProject.ext.signs.storeFile)
            storePassword rootProject.ext.signs.storePassword
            keyAlias rootProject.ext.signs.keyAlias
            keyPassword rootProject.ext.signs.keyPassword
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true // 自动清理无用资源
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            android.applicationVariants.all { variant ->
                // 更新至Android Studio 3.3 gradle 4.10.1
                variant.outputs.all {
                    outputFileName = "Kefan_${defaultConfig.versionName}_${variant.buildType.name}.apk"
                }
//                variant.outputs.all { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        def fileName = "WanAndroid-release.apk"
//                        outputFileName = fileName
//                    }
//                }
            }
        }
        debug {
            resValue("string", "PORT_NUMBER", "8081")
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

//    productFlavors {
//
//    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    dexOptions {
        dexInProcess true
        preDexLibraries true
        javaMaxHeapSize "4g"
        // incremental true
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    configurations {
        all*.exclude group: 'com.android.support', module: 'support-v13'
    }
    testImplementation rootProject.ext.testDeps["junit"]
    androidTestImplementation rootProject.ext.testDeps["runner"]
    androidTestImplementation rootProject.ext.testDeps["espresso-core"]
    //leakCanary
    debugImplementation rootProject.ext.testDeps["leakcanary-debug"]
    releaseImplementation rootProject.ext.testDeps["leakcanary-release"]
    // Support库
    api rootProject.ext.supportLibs
    // 网络请求库
    implementation rootProject.ext.networkLibs
    // RxJava2
    implementation rootProject.ext.rxJavaLibs
    implementation rootProject.ext.commonLibs
    // APT dependencies(Kotlin内置的注解处理器)
    annotationProcessor rootProject.ext.annotationProcessorLibs
    //GlideOkHttp
    implementation(rootProject.ext.otherDeps["glideOkhttp"]) {
        exclude group: 'glide-parent'
    }
    debugImplementation rootProject.ext.testDeps["debug-db"]
    implementation project(':multiple-status-view')
    implementation project(':verticaltablayout')
}
